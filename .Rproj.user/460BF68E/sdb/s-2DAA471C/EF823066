{
    "collab_server" : "",
    "contents" : "devtools::document()\nlibrary(raster)\nlibrary(sp)\nlibrary(rgdal)\nlibrary(rgeos)\nlibrary(gstat)\nlibrary(geospaar)\n\ndata(\"chirps\")\nfnm1<-system.file(\"extdata/districts.shp\", package = \"geospaar\")\ndistricts <- readOGR(dsn = fnm1, layer = \"districts\")\nroads <- readOGR(system.file(\"extdata/roads.shp\", package = \"geospaar\"),\n                 layer = \"roads\")\nfarmers <- read.csv(system.file(\"extdata/farmer_spatial.csv\",\n                                package = \"geospaar\"), stringsAsFactors = FALSE)\n#TASK 1\ndistricts_ss<-districts[c(22,26,53,54),]\nr<-raster(x=districts_ss, res=0.1, crs=crs(districts))\nset.seed(1)\nvalues(r)<-sample(10:50, size=ncell(r),replace=TRUE)\nrsamp<-r #sample\nvalues(r)<-sample(rnorm(ncell(r),30,5))\nruni<-r #randnormal\ns<-stack(rsamp, runi)\ns<-mask(x=s, mask=districts_ss)\npar(mfrow = c(2, 2), mar = c(0, 0, 1, 0))\nnames(s)<-c(\"sample\",\"randnormal\")\nfor (i in 1:2) plot_noaxes(s[[i]], main=names(s)[i])\n\n#TASK 2\n#disaggregate\ns[[1]]\ns2_1d<-disaggregate(x=s[[1]], fact=4, method=\"bilinear\") #disaggregates to 0.025 resolution with bilinear\ns2_1gt35<- s2_1d>35 #select areas >35\ns2_1gt35[s2_1gt35==0]<-NA #0 values to NA, convert raster to spatial polygons\ns2poly<-rasterToPolygons(s2_1gt35, dissolve=TRUE)\nplot(s2_1d) #resolution appears to be the same as before disaggregation :( !!!!!!!!!!!!!!!!!!!!\nplot(s2poly, add=TRUE)\n\n#TASK 3\n#creating raster of # farmers per pixel\nzamr<-raster(x=districts, res=0.5, crs=crs(districts))\nvalues(zamr)<-1\nfarmers2 <- do.call(rbind, lapply(unique(farmers$uuid), function(x) {\n  dat <- farmers[farmers$uuid == x, ][1, ]  # select first row only\n}))\ncoordinates(farmers2) <- ~lon + lat\nfarmers2$ct <- 1\nfarmers2r<-rasterize(farmers2, zamr, field=\"ct\", fun=sum)\nfarmersr<-mask(x=farmers2r, mask=districts)\nplot(districts, col=\"grey\", border=\"transparent\", main=\"N farmers per 0.5 degree grid cell\")\nplot(farmersr, add=TRUE)\n\n#TASK 4\n#converting raster to points and calculating distance\n\nfarmersrpts<-as.data.frame(rasterToPoints(x=farmersr))\ncoordinates(farmersrpts)<- ~x+y\nzamr<-raster(x=districts, res=0.05, crs=crs(districts))\ndist_to_farms<-distanceFromPoints(object=zamr, xy=farmersrpts)\ndist_to_farms<-(mask(x=dist_to_farms, mask=districts))/1000\nplot_noaxes(dist_to_farms, legend.args=list(text=\"km\"))\nplot(farmersrpts, add=TRUE, pch=20)\n\n#TASK 5\nworldT<-getData(name=\"worldclim\", var=\"tmean\", res=2.5)\nsummary(worldT)\nzambT<-intersect(x=worldT, districts)\nzamtmean <- mask(calc(zambT, mean), districts)/10\nplot_noaxes(zamtmean, main=\"Mean Temperature\")\n\n#TASK 6\n#creating temperature classes\ncellStats(zamtmean, range)\nlow<-c( 16, 20)\nmedium<-c( 20, 24)\nhigh<-c( 24, 27)\nCbounds<-rbind(low, medium, high)\nCbounds<-cbind(Cbounds, 1:3)\nzamtclass <- reclassify(x = zamtmean, rcl = Cbounds, include.lowest = TRUE)\ncols<-c(\"blue\",\"yellow2\",\"red\")\n\nplot_noaxes(zamtclass, legend=FALSE, main=\"Temperature Zones\", col=cols, mar=c(0,0,1,0))\nlegend(x=\"bottomright\", bty=\"n\", legend=c(\"high\", \"medium\", \"low\"), pch=15, col=rev(cols))\n\n#TASK 7\ndata(\"zamprec\")\nz<-zonal(x=zamprec, z=zamtclass, fun=\"mean\")\nzamprecz<-subs(x=zamtclass, y=data.frame(z))\ncols<-c(\"yellow2\",\"green3\",\"blue\")\nlabels_z<-c(round(z[1,2]), round(z[2,2]), round(z[3,2]))\nplot_noaxes(zamtclass, legend=FALSE, main=\"Temperature Zones\", col=cols, mar=c(0,0,1,0))\nlegend(x=\"bottomright\", bty=\"n\", legend=labels_z, pch=15, col=rev(cols))\n\n# TASK 8\ndem<-getData(\"alt\", country=\"ZMB\") #download elevation data for Zambia\ndem5<-aggregate(x=dem, fact=5, fun=mean) #change resolution\naspect<-terrain(dem5, opt=\"aspect\", unit=\"degrees\") #do aspect analysis\nW<-c(247.5,292.5,1) #range for Western slopes\nE<-c(67.5,112.5,1) #range for Easter slopes\nWest <- reclassify(x = aspect, rcl = W, include.lowest = TRUE)\nEast<-reclassify(x = aspect, rcl = E, include.lowest = TRUE)\n#plot the Aspect, W and E\nasEW<-stack(aspect,East==1,West==1)\npar(mfrow = c(1, 3), mar = c(0, 0, 1, 0))\nnames(asEW)<-c(\"Aspect\",\"East\",\"West\")\nfor (i in 1:3) plot_noaxes(asEW[[i]], main=names(asEW)[i])\n\n#TASK 9\n#boxplots from randomly selected points\nset.seed(1)\nWest<-West==1\nvalues(West)[values(West) ==0] = NA\nEast<-East==1\nvalues(East)[values(East) ==0] = NA\n#sample 100 points from W and E\nWsamp <- sampleRandom(x = West, size = 100, xy=TRUE)\nWsamp<-as.data.frame(Wsamp)\ncoordinates(Wsamp) <- ~x + y\nEsamp <- sampleRandom(x = East, size = 100, xy=TRUE)\nEsamp<-as.data.frame(Esamp)\ncoordinates(Esamp) <- ~x + y\n#extract mean temperature values at 100 random points and plot\nWtmean <- extract(x = zamtmean, y = Wsamp)\nEtmean<- extract(x= zamtmean, y=Esamp)\nWtmeanM <- mean(Wtmean, na.rm = TRUE)\nEtmeanM <- mean(Etmean, na.rm = TRUE)\nboxplot(x = list(Wtmean, Etmean), col = c(\"blue\", \"red\"), xaxt = \"n\",\n        main = \"East and West ave temperature\", ylab = \"temperature\")\npoints(x = 1:2, y = c(WtmeanM, EtmeanM), pch = 16, cex = 2)\naxis(side = 1, at = 1:2, labels = c(\"West\", \"East\"))\n\n#TASK 10\ndcent<- gCentroid(districts, byid=TRUE) #district centroids\ndcent_alb <- spTransform(dcent, crs(roads)) #transform centroids\nzamtmeanalb <- projectRaster(from = zamtmean, res = 5000, crs = crs(roads),\n                          method = \"bilinear\") #repreject temperature raster\nnames(zamtmeanalb)<-\"RealTemp\"\ndcent_alb$temp<-extract(x=zamtmeanalb, y=dcent_alb) #add temperature values to centroids\n#interpolate\nidw <- gstat( formula = temp ~ 1, locations = dcent_alb,\n                 data = dcent_alb) #set IDW interpolation model\nr <- raster(extent(zamtmeanalb), res = res(zamtmeanalb), crs = crs(zamtmeanalb),\n            vals = 1) #create blank raster for interpolation\nzamp <- interpolate(object = r, model = idw) #interpolate points onto r surface\nzamtidw <- mask(x = zamp, mask = zamtmeanalb) # mask surface to shape of Zambia\npar(mfrow = c(1, 2), mar = c(0, 0, 1, 0))\nplot_noaxes(zamtmeanalb, main=\"Realtemp\")#plotting results\nplot_noaxes(zamtidw, main=\"IDWtemp\")\n\n\n#Extra Credit\n#create kriging, measure spatial autocorrelation between point values\nv <- variogram(object = temp ~ 1, data = dcent_alb)\nm <- fit.variogram(object = v, model = vgm(\"Sph\"))\n#interpolate onto r surface using kriging\nzkrig <- gstat(formula = temp ~ 1, data = dcent_alb, model= m)\nzkrigr <- interpolate(object = r, model = zkrig)\nzkrigrmsk <- mask(x = zkrigr, mask = zamtmeanalb)\nnames(zkrigrmsk)<-\"Krigtemp\"\n#plot variograms\nplot(variogramLine(m, max(v[, 2])), type = \"l\")\npoints(v[, 2:3], pch = 20, col=\"red\")\nlegend(\"bottomright\", legend = c(\"variogram fit\", \"variogram\"), lty = c(1, NA),\n       pch = c(NA, 20), col=c(\"black\",\"red\"), bty = \"n\")\naxis(side = 1, at = 1:2, labels = c(\"gamma\", \"dist\"))\n#plot for comparison\npar(mfrow = c(1, 3), mar = c(0, 0, 1, 0))\nitemp_Z<-stack(zamtmeanalb,zamtidw,zkrigrmsk)\nplot_noaxes(itemp_Z)\n",
    "created" : 1522849966395.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3056757084",
    "id" : "EF823066",
    "lastKnownWriteTime" : 1510175771,
    "last_content_update" : 1510175771,
    "path" : "~/R/nmccray/nbma1/workspace.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}